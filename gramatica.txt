<tradutor> :== <declaracoesExtenas>

<declaracoesExtenas> :== <funcoes>
                       | <declaracoesVariaveis>
                       | <declaracoesExtenas> <funcoes>
                       | <declaracoesExtenas> <declaracoesVariaveis>
                       
<declaracoesVariaveis> :== <tipagem> ID SEMICOMMA
  
<funcoes> :== <tipagem> ID OPEN_( <parametros> CLOSE_) <posDeclaracao>
  
<parametros> :== <parametros> COMMA <tipagem> ID
                | <tipagem> ID
                | %empty

<posDeclaracao> :== OPEN_BRACKETS <sentencaLista> CLOSE_BRACKETS

<tipagem> :== TYPE_INT
             | TYPE_FLOAT:
             | TYPE_ELEM
             | TYPE_SET

<sentencaLista> :== <sentencaLista> <sentenca>
                   | %empty

<sentenca>:== <condicionalSentenca>
            | <iteracaoSentenca>
            | <returnSentenca>
            | <leituraEscritaSentenca>
            | <expressao>
            | <declaracoesVariaveis>
            | <conjuntoForall>
            

<conjuntoForall>:== SET_FORALL OPEN_( <conjuntoIN> CLOSE_) <posIFForallExists>

<condicionalSentenca>:== IF OPEN_( <condicaoIF> CLOSE_) <posIFForallExists>
                        | IF OPEN_( <condicaoIF> CLOSE_) <posIFForallExists> ELSE <posIFForallExists>

<condicaoIF>:== <expressaoSimplificada>
                | <conjuntoIN>
                | NEGATIVE <expressaoSimplificada>
                | NEGATIVE <conjuntoIN>
                | OPEN_( <conjuntoIN> CLOSE_)

<posIFForallExists>:== <posDeclaracao>
                      | <sentenca>

<iteracaoSentenca>:==
                 FOR OPEN_( <expressao> <expressaoSimplificada> SEMICOMMA <expressaoFor> CLOSE_) <posDeclaracao>

<returnSentenca>:== RETURN <expressaoSimplificada> SEMICOMMA

<leituraEscritaSentenca>:== OUT_WRITE OPEN_( <expressaoSimplificada> CLOSE_) SEMICOMMA
                            | OUT_WRITELN OPEN_( <expressaoSimplificada> CLOSE_) SEMICOMMA
                            | IN_READ OPEN_( ID CLOSE_) SEMICOMMA

<argumentos>:== <argumentosLista>
              | %empty

<argumentosLista>:== <expressaoSimplificada>
                   | <argumentosLista> COMMA <expressaoSimplificada>

<conjuntoSentenca>:== SET_ADD OPEN_( <conjuntoIN> CLOSE_)
                    | SET_REMOVE OPEN_( <conjuntoIN> CLOSE_)
                    | SET_IS_SET OPEN_( ID CLOSE_)
                    | SET_EXISTS OPEN_( <conjuntoIN> CLOSE_)

<conjuntoIN>:== <expressaoSimplificada> SET_IN <conjuntoSentenca>
                | <expressaoSimplificada> SET_IN ID

<expressao>:== ID ASSING <expressao>
             | <expressaoSimplificada> SEMICOMMA

<expressaoFor>:== ID ASSING <expressaoFor>
                | <expressaoSimplificada>

<expressaoSimplificada>: <expressaoSimplificada> <operacaoLogic> <expressaoComparacao>
                      | <expressaoComparacao>

<expressaoComparacao>: <expressaoComparacao> <operacaoComparacao> <expressaoNumerica>
                    | <expressaoNumerica>

<expressaoNumerica>: <expressaoNumerica> <operacaoNumerica> <expressaoMulDiv>
                  | <expressaoMulDiv>

<expressaoMulDiv>: <expressaoMulDiv> <operacaoMultDiv> <expressaoSimplificadaMinus>
                | <expressaoSimplificadaMinus>

<expressaoSimplificadaMinus>: SUB <termo>
                           | <termo>

<operacaoNumerica>: ADD
                 | SUB

<operacaoMultDiv>: MULT
                | DIV

<operacaoLogic>:== OR
                 | AND
                 | NEGATIVE

<operacaoComparacao>:== COMPARABLES_EQUAL
                      | COMPARABLES_DIFF
                      | COMPARABLES_LTE
                      | COMPARABLES_GTE
                      | COMPARABLES_LT
                      | COMPARABLES_GT

<termo>:== OPEN_( <expressaoSimplificada> CLOSE_)
          | ID
          | INT
          | FLOAT
          | EMPTY_LABEL
          | STRING
          | CHAR
          | ID OPEN_( <argumentos> CLOSE_)
          | <conjuntoSentenca>