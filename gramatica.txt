<tradutor> ::= <declaracoesExtenas>

<declaracoesExtenas> ::= <funcoes>
                        | <declaracoesVariaveis>
                        | <funcoes> <declaracoesExtenas>
                        | <declaracoesVariaveis> <declaracoesExtenas>

<funcoes> ::= <tipagem> <identificador> ( <parametros> ) <posDeclaracao>

<parametros>: parametroLista | e

<parametroLista> ::= <declaracoesVariaveis>
                   | <parametros> , <declaracoesVariaveis>

<declaracoesVariaveis> ::= <tipagem> <identificador> ; | <tipagem> <identificador>

<posDeclaracao> ::= { <declaracoesVariaveis> <conjuntoSetencas> }

<conjuntoSetencas> ::= <sentenca> <conjuntoSetencas> | e

<sentenca> ::= <condicionalSentenca>
            | <iteracaoSentenca>
            | <returnSentenca>
            | <leituraEscritaSentenca>
            | <expressoesSenteca> 
            | <conjSetenca>
            

<condicionalSentenca> ::= if ( <expressao> ) <sentenca>
                        | if ( <expressao> ) <sentenca> else <sentenca>


<expressao> ::= <identificador> = <expressao> 
               | <expressaoSimples>
               | <expressaoConjunto>


<operacoesConjunto> ::= add ( <elemento>)
                  | remove ( <elemento>)
                  | exists ( <elemento> in <elemento> )


<iteracaoSentenca> ::= for ( {<expressao>}? ; {<expressao>}? ; {<expressao>}? ) <setenca>

<returnSentenca> ::= return {<expressao>}? ;

<leituraEscritaSentenca> ::= write (<letra>)
                            | writeln (<letra>)
                            | read (<identificador>)

<expressoesSenteca> ::=  <expressao> ; 
                        | ;                          

<conjSetenca> ::= forall ( <expressaoIn> ) <setenca> 
                  | is_set ( <identificador> )

<expressaoIn> ::= <expressao> " in " <expressaoConjunto>
                  | <expressao> " in " <identificador>

<expressaoConjunto> ::= { <grupoElemento> } 
                   | <operacoesConjunto>

<grupoElemento> ::= <elemento> , <grupoElemento> 
                 | <elemento>

<elemento> ::= <identificador> 
         | <inteiro> 
         | <decimal>

<expressaoSimples> ::= <expressaoOperacao> <operacaoComparacao> <expressaoOperacao> 
                        | <expressaoOperacao>


<expressaoOperacao> ::= <expressaoOperacao> <operacaoNumerica> <termo>
                        | <expressaoOperacao> <operacaoLogic> <termo>
                        | <termo>

<operacaoComparacao> ::=  ==
                        |!=
                        |>
                        |<
                        |>=
                        |<=
                        
<operacaoNumerica> ::=  +
                        | -
                        | /
                        | * 

<operacaoLogic> ::= ||
                    | &&
                    | !

<termo> ::= (<expressaoSimples>)
    |<identificador>
    |<digito>
    |<digito>.<digito>
    | EMPTY


<identificador> ::= (<sublinhado>|<letra>)+(<letra>|<digito>|<sublinhado>)*

<letra> ::= [a-zA-Z] <letra>
            | e

<digito> ::= [0-9] <digito>
            | e

<sublinhado>  ::= _

