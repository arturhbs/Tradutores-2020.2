<tradutor> ::= <declaracoesExtenas>

<declaracoesExtenas> ::= <funcoes>
                        | <declaracoesVariaveis>
                        | <funcoes> <declaracoesExtenas>
                        | <declaracoesVariaveis> <declaracoesExtenas>

<funcoes> ::= <tipagem> <identificador> ( <parametros> ) <posDeclaracao>

<tipagem> ::= int
            | float
            | elem
            | set 

<identificador> ::= (<sublinhado>|<letra>)+(<letra>|<digito>|<sublinhado>)*

<parametros> ::= <tipagem> <identificador>
                | <parametros> , <tipagem> <identificador>
                | e

<declaracoesVariaveis> ::= <tipagem> <identificador> ; 

<posDeclaracao> ::= { <declaracoesVariaveisLocais> <sentencaLista> }

<declaracoesVariaveisLocais> ::= <declaracoesVariaveisLocais> <declaracoesVariaveis>
                               | e 

<sentencaLista> ::=  <sentencaLista> <sentenca> | e

<sentenca> ::= <condicionalSentenca>
            | <iteracaoSentenca>
            | <returnSentenca>
            | <leituraEscritaSentenca>
            | <chamaFuncoes>
            | <expressoesSentenca> 
            | <conjuntoSentenca>
            

<condicionalSentenca> ::= if ( <expressaoSimplificada> ) <posDeclaracao>
                         | if ( <expressaoSimplificada> ) <posDeclaracao> else <posDeclaracao>


<expressaoSimplificada> ::= <expressaoOperacao> <operacaoComparacao> <expressaoOperacao> 
                      | <expressaoOperacao>


<iteracaoSentenca> ::= for ( <expressao> ; <expressaoSimplificada> ; <expressao> ) <posDeclaracao>

<expressao> ::= <identificador> = <expressao> 
               | <expressaoSimplificada> ;

<returnSentenca> ::= return <expressaoSimplificada> ; 
                    | return ;

<leituraEscritaSentenca> ::= write (STRING)
                            | writeln (STRING)
                            | read (<identificador>)

<chamaFuncoes> ::= <identificador> (<argumentos>)

<argumentos> ::= <argumentosLista> 
                | e 

<argumentosLista> ::= <expressaoSimplificada> 
                     | <expressaoSimplificada>, <argumentosLista>
                     | expressaoSimplificada   

<expressoesSentenca> ::= <identificador> <expressao> 
                       | <expressaoSimplificada> ;                          

<conjuntoSentenca> ::= ADD ( <conjuntoBoleano> ) ;
                      | REMOVE ( <conjuntoBoleano>) ;
                      | FORALL(<conjuntoExpressaoForallExists>) <sentenca> ;
                      | IS_SET(<identificador>) ;
                      | EXISTS (<conjuntoExpressaoForallExists>) <sentenca> ;

<conjuntoBoleano> ::= <expressao> IN <conjuntoSentenca>
                     | <expressao> IN <identificador>

<conjuntoExpressaoForallExists> ::= <identificador> IN <conjuntoSentenca>
                             | <identificador> IN <identificador>    
                   
<expressaoOperacao> ::= <expressaoOperacao> <operacaoNumerica> <termo>
                       | <expressaoOperacao> <operacaoLogic> <termo>
                       | <termo>

<operacaoComparacao> ::=  ==
                        |!=
                        |>
                        |<
                        |>=
                        |<=
                        
<operacaoNumerica> ::=  +
                        | -
                        | /
                        | * 

<operacaoLogic> ::= ||
                    | &&
                    | !

<termo> ::= (<expressaoSimplificada>)
    |<identificador>
    | INT
    | FLOAT
    | EMPTY_LABEL
    | OPEN_QUOTE STRING CLOSE_QUOTE



<letra> ::= [a-zA-Z] <letra>
            | e

<digito> ::= [0-9] <digito>
            | e

<sublinhado>  ::= _

