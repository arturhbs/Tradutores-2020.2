<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
#                         | <declaration>


<function-definition> ::= {<declaration-specifier>}* #<declarator> {<declaration>}* <compound-statement>

<declaration-specifier> ::= <type-specifier>

<type-specifier> ::= int
                   | float
                   | elem
                   | set 

<declarator> ::= <direct-declarator>

<direct-declarator> ::= <identifier>
                      | ( <declarator> )
                      | <direct-declarator> [ {<constant-expression>}? ]
                      | <direct-declarator> ( <parameter-type-list> )
                      | <direct-declarator> ( {<identifier>}* )

<constant-expression> ::= <conditional-expression>


<conditional-expression> ::= <logical-or-expression>
                           | <logical-or-expression> ? <expression> : <conditional-expression>

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> || <logical-and-expression>

<logical-and-expression> ::= <inclusive-or-expression>
                           | <logical-and-expression> && <inclusive-or-expression>

<set-negation-expression> ::= <set-negation-expression>
                            | <set-negation-expression> -() <set-negation-expression>

<set-disjunction-expression> ::= <set-disjunction-expression>
                            | <set-disjunction-expression> v() <set-disjunction-expression>

<set-conjuction-expression> ::= <set-conjuction-expression>
                            | <set-conjuction-expression> ^() <set-conjuction-expression>

<exclusive-or-expression> ::= <and-expression>
                            | <exclusive-or-expression> ^ <and-expression>

<and-expression> ::= <equality-expression>
                   | <and-expression> & <equality-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> == <relational-expression>
                        | <equality-expression> != <relational-expression>

<relational-expression> ::= <shift-expression>
                          | <relational-expression> < <shift-expression>
                          | <relational-expression> > <shift-expression>
                          | <relational-expression> <= <shift-expression>
                          | <relational-expression> >= <shift-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> * <cast-expression>
                              | <multiplicative-expression> / <cast-expression>

<cast-expression> ::= <unary-expression>
                 

<unary-expression> ::= <postfix-expression>
                     | <unary-operator> <cast-expression>    

<postfix-expression> ::= <primary-expression>
                       
<primary-expression> ::= <identifier>
                       | <constant>
                       | <string>
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <floating-constant>
             | EMPTY


<expression> ::= <assignment-expression>
               | <expression> , <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                          | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= =


<unary-operator> ::= &
                   | *
                   | +
                   | -


<init-declarator> ::= <declarator>
                    | <declarator> = <initializer>

<initializer> ::= <assignment-expression>
                | { <initializer-list> }
                | { <initializer-list> , }

<initializer-list> ::= <initializer>
                     | <initializer-list> , <initializer>

<compound-statement> ::= { {<declaration>}* {<statement>}* }

<statement> ::= <labeled-statement>
              | <expression-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>
              | <set-statement>


<set-statement> ::= <set-negation-expression>
                    |<set-disjunction-expression>
                    |<set-conjuction-expression>

<labeled-statement> ::= <identifier> : <statement>
                      | case <constant-expression> : <statement>
                      | default : <statement>


<expression-statement> ::= {<expression>}? ;

<selection-statement> ::= if ( <expression> ) <statement>
                        | if ( <expression> ) <statement> else <statement>
        
<iteration-statement> ::= for ( {<expression>}? ; {<expression>}? ; {<expression>}? ) <statement>

<jump-statement> ::= return {<expression>}? ;